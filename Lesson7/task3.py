"""
3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (add()),       Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
вычитание (sub()),      Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
умножение (mul()),      Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
деление (truediv()).    Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
В методе деления должно осуществляться округление значения до целого числа.

Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида **\n\n***..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: **\n\n.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: **\n\n***.
"""


class Cell():
    def __init__(self, cell_number):
        self.cell_number = cell_number
    def make_order(self, x: int) -> str:
        """
        Данный метод формирует строковую матрицу с заданной шириной x
        :param x: int
        :return: str
        """
        result = ''
        for itm in range(self.cell_number//x):        #Считаем количество полных слоев
            result += ('*' * x) + '\n'                #Умножаем результат на ширину слоя
        result += ('*' * (self.cell_number%x)) + '\n' #Дописываем остаток в результат
        return result

    def __add__(self, other):
        return Cell(self.cell_number + other.cell_number)

    def __sub__(self, other):
        result = self.cell_number - other.cell_number
        if result>0:
         return Cell(self.cell_number - other.cell_number)
        else:
         print("Разность меньше нуля! создана клетка с одной ячейкой")
         return Cell(1)

    def __mul__(self, other):
        return Cell(self.cell_number * other.cell_number)

    def __truediv__(self, other):
         return Cell(self.cell_number // other.cell_number)


cell1 = Cell(15)
cell2 = Cell(4)


cell3 = cell1 + cell2
print(cell3.cell_number)

cell3 = cell1 * cell2
print(cell3.cell_number)

cell3 = cell1 / cell2
print(cell3.cell_number)

cell3 = cell1 - cell2
print(cell3.cell_number)

cell4 = Cell(15)
print(cell4.make_order(6))